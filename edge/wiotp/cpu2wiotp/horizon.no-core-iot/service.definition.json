{
    "org": "$HZN_ORG_ID",
    "label": "$CPU2WIOTP_NAME Directly to WIoTP for $ARCH",
    "description": "Sample Horizon service that repeatedly reads the CPU load and sends it directly to WIoTP",
    "public": true,
    "url": "https://$MYDOMAIN/services/$CPU2WIOTP_NAME-no-core-iot",
    "version": "$CPU2WIOTP_VERSION",
    "arch": "$ARCH",
    "sharable": "multiple",
    "matchHardware": null,
    "requiredServices": [
        {
            "url": "https://$MYDOMAIN/services/$CPU_NAME",
            "org": "$HZN_ORG_ID",
            "version": "$CPU_VERSION",
            "arch": "$ARCH"
        }
    ],
    "userInput": [
        {
            "name": "WIOTP_GW_TOKEN",
            "label": "The token of the WIoTP gateway needed to send directly to WIoTP cloud MQTT",
            "type": "string",
            "defaultValue": ""
        },
        {
            "name": "SAMPLE_SIZE",
            "label": "the number of samples to read before calculating the average",
            "type": "int",
            "defaultValue": "6"
        },
        {
            "name": "SAMPLE_INTERVAL",
            "label": "the number of seconds between samples",
            "type": "int",
            "defaultValue": "5"
        },
        {
            "name": "MOCK",
            "label": "mock the CPU sampling",
            "type": "boolean",
            "defaultValue": "false"
        },
        {
            "name": "PUBLISH",
            "label": "publish the CPU samples to WIoTP",
            "type": "boolean",
            "defaultValue": "true"
        },
        {
            "name": "VERBOSE",
            "label": "log everything that happens",
            "type": "string",
            "defaultValue": "0"
        }
    ],
    "deployment": {
        "services": {
            "cpu2wiotp": {
                "environment": [
                    "WIOTP_DOMAIN=$WIOTP_DOMAIN"
                ],
                "image": "$DOCKER_HUB_ID/${ARCH}_$CPU2WIOTP_NAME:$CPU2WIOTP_VERSION"
            }
        }
    },
    "deploymentSignature": "",
    "imageStore": {
        "storeType": "dockerRegistry"
    }
}